// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	models "github.com/dliakhov/db-query-analyzer/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockQueryAnalyzerRepository is a mock of QueryAnalyzerRepository interface.
type MockQueryAnalyzerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQueryAnalyzerRepositoryMockRecorder
}

// MockQueryAnalyzerRepositoryMockRecorder is the mock recorder for MockQueryAnalyzerRepository.
type MockQueryAnalyzerRepositoryMockRecorder struct {
	mock *MockQueryAnalyzerRepository
}

// NewMockQueryAnalyzerRepository creates a new mock instance.
func NewMockQueryAnalyzerRepository(ctrl *gomock.Controller) *MockQueryAnalyzerRepository {
	mock := &MockQueryAnalyzerRepository{ctrl: ctrl}
	mock.recorder = &MockQueryAnalyzerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryAnalyzerRepository) EXPECT() *MockQueryAnalyzerRepositoryMockRecorder {
	return m.recorder
}

// GetDatabaseQueryInfo mocks base method.
func (m *MockQueryAnalyzerRepository) GetDatabaseQueryInfo(queryRequest models.QueryRequest) ([]models.DatabaseQueryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseQueryInfo", queryRequest)
	ret0, _ := ret[0].([]models.DatabaseQueryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseQueryInfo indicates an expected call of GetDatabaseQueryInfo.
func (mr *MockQueryAnalyzerRepositoryMockRecorder) GetDatabaseQueryInfo(queryRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseQueryInfo", reflect.TypeOf((*MockQueryAnalyzerRepository)(nil).GetDatabaseQueryInfo), queryRequest)
}
